Q1 : Le niveau de documentation des classes est-il approprié par rapport à leur complexité ?
        Complexité Cyclomatique && densite de commentaire (ncloc/nvloc) :
Q2 : La conception est-elle bien modulaire ?
        Coupling Between Objects && God Class && nvloc
Q3 : Le code est-il mature ?
        date du premier commit && date du dernier commit && nombre de commits ( && peut-être nvloc)
Q4 : Le code peut-il être testé bien automatiquement ?
        Coupling Between Objects && Ratio taille code / taille test (nvloc code/test)


Timestamp du premier  commit :
    git log --reverse --date="format:%s" --format="format:%ad" | head -n 1
Timestamp du dernier commit :
    git log --date="format:%s" --format="format:%ad" | head -n 1 



Q1
Pour mesurer la complexité du code nous avons décidé d’utiliser la complexité cyclomatique. Une très bonne complexité se retrouverait entre 1 et 10, une complexité moyenne se retrouverait entre 11 et 20, une complexité haute 21-50 et finalement une complexité très haute se retrouverait a 50 et plus
Pour mesurer la densité de commentaires nous utilisons le ratio NCLOC/NVLOC

Q2 La conception est-elle bien modulaire ?
Coupling between objects:Nous avons décidé d'utiliser la métrique CBO (Coupling between objects) qui compte le nombre de classes couplées à une classe particulière. Avec cette métrique nous pourrons évaluer la modularité car un couplage excessif empêche la réutilisation.
God Class:Nous allons analyser les god class car ceux ci en font trop et nuisent à la réutilisation et à la modularité du code.
NCLOC/NCLOC pour mesurer la densité des commentaires 

Q3 Le code est-il mature ?
Pour la maturité du code nous allons déterminer l'âge du code a partir de la date du premier commit, la date du dernier commit ainsi que du nombre de commits car  signifie que le code traversé une période très longue et ininterrompue de développement et de maintenance constants.
